// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_leader

import (
	"context"

	"github.com/moonwayio/nautes/leader"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLeader creates a new instance of MockLeader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLeader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLeader {
	mock := &MockLeader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLeader is an autogenerated mock type for the Leader type
type MockLeader struct {
	mock.Mock
}

type MockLeader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLeader) EXPECT() *MockLeader_Expecter {
	return &MockLeader_Expecter{mock: &_m.Mock}
}

// IsLeader provides a mock function for the type MockLeader
func (_mock *MockLeader) IsLeader() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsLeader")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockLeader_IsLeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLeader'
type MockLeader_IsLeader_Call struct {
	*mock.Call
}

// IsLeader is a helper method to define mock.On call
func (_e *MockLeader_Expecter) IsLeader() *MockLeader_IsLeader_Call {
	return &MockLeader_IsLeader_Call{Call: _e.mock.On("IsLeader")}
}

func (_c *MockLeader_IsLeader_Call) Run(run func()) *MockLeader_IsLeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLeader_IsLeader_Call) Return(b bool) *MockLeader_IsLeader_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockLeader_IsLeader_Call) RunAndReturn(run func() bool) *MockLeader_IsLeader_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockLeader
func (_mock *MockLeader) Run(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLeader_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockLeader_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLeader_Expecter) Run(ctx interface{}) *MockLeader_Run_Call {
	return &MockLeader_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockLeader_Run_Call) Run(run func(ctx context.Context)) *MockLeader_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLeader_Run_Call) Return(err error) *MockLeader_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLeader_Run_Call) RunAndReturn(run func(ctx context.Context) error) *MockLeader_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type MockLeader
func (_mock *MockLeader) Subscribe(subscriber leader.ElectionSubscriber) error {
	ret := _mock.Called(subscriber)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(leader.ElectionSubscriber) error); ok {
		r0 = returnFunc(subscriber)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLeader_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockLeader_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - subscriber leader.ElectionSubscriber
func (_e *MockLeader_Expecter) Subscribe(subscriber interface{}) *MockLeader_Subscribe_Call {
	return &MockLeader_Subscribe_Call{Call: _e.mock.On("Subscribe", subscriber)}
}

func (_c *MockLeader_Subscribe_Call) Run(run func(subscriber leader.ElectionSubscriber)) *MockLeader_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 leader.ElectionSubscriber
		if args[0] != nil {
			arg0 = args[0].(leader.ElectionSubscriber)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLeader_Subscribe_Call) Return(err error) *MockLeader_Subscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLeader_Subscribe_Call) RunAndReturn(run func(subscriber leader.ElectionSubscriber) error) *MockLeader_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}
